1. Первоначальная настройка GIT Bash. Настраиваем среду для работы под 
себя. Это необходимо сделать единоразово. Первое, что следует сделать 
после установки GIT Bash - указать имя и адрес эл. почты. Это важно, 
потому что каждый коммит в GIT содержит эту информацию, и она включена в 
коммиты, передаваемые вами, и не может быть далее изменена: 
$ git config --global user.name "имя пользователя"
$ git config -- global user.email почта

2. Генерация и добавление SSH ключа для подключения к удаленному репозиторию GitHub:
$ ssh-keygen -t rsa -C почта 
Вводим ключ.
Это необходимо сделать, чтобы:
1) трафик быыл защищен;
2) мы могли клонировать репозиторий по SSH ключу.

3. После находим этот ключ в папках и открываем с помощью блокнота, копируем ключ.

4. Заходим на Github в настройки -> SSH and GPG keys -> выбираем New SSH key -> вводим в Title New_key -> в Key вводим скопированный ключ из блокнота -> сохраняем.

5. Создали репозиторий на Github.

6. Копирование сущетвующего репозитория.
Для получения копии существующего Git-репозитория необходимо использовать команду git clone. При выполнении git clone c сервера забирается каждая версия каждого файла из истории проектов.
Клонирования репозитория осуществляется командой:
$ git clone <url> -> вставляем code SSh key из Github.
Вводим ключ.
 
Основные команды терминала Git Bash:
1. $ pwd - посмотреть где я
2. $ mkdir имя папки - создать папку
3. $ mkdir имя папки, имя папки, .. - создать несколько папок
4. $ cd имя папки - зайти в папку
5. $ cd без ничего - выйдем в корневую папку
6. $ cd .. - переносит на 1 уровень выше
7. $ ls - просмотр всех файлов и папок
8. $ touch имя_файла.txt имя_файла.json - создать файл с определенным расширением
9. $ nano имя_файла.txt - открывается интерфейс редактирования -> завершить редактирование - ctrl+x -> enter
10. $ mv имя_файла.txt путь файла, куда хотим переместить - перемещение файла
Если перемещать 2 и более файла, то их названия прописываем через пробел.
Варианты перемещения:
Вариант 1
Относительная адресация - относительно той папки, в которой я нахожусь. Здесь можно использовать ../ для указания родительской папки.
Вариант 2
Абсолютная адресация - начинается с корневой папки. 
11. $ mv oldfilename newfilename 
C помощью команды mv можно переименовать файлы.
12. $ cp имя_файла.txt путь, куда хотим скопировать файл. Если скопировать 2 и более файла, то их названия прописывать через пробел.
13. $ find директория -name имя_файла.txt - найти файл по имени
14. $ grep "" имя_файл.txt - посмотреть содержимое в реальном времени (поиск внутри файла). В "" можно вписать слово которое ищем или регулярное выражение.
15. $ cat имя_файла.txt - показывает содержимое
16. $ head -4 имя_файла.txt - вывести несколько первых строк из текстового файла (4 - это количество строк, в нашем случае мы выведем первые 4 строки)
17. $ tail -4 имя_файла.txt - вывести несколько последних строк из текстового файла (выведутся последние 4 строчки)
18. $ less имя_файла.txt - команда less используется для просмотра длинных текстов и не засоряет терминал
19. $ date - вывести дату и время
20. $ clear - очистить терминал
21. $ git add имя_файла.txt - команда используется для сборки слепка нашего следующего коммита.
22. $ git commit -a -m "комментарий" - сохраняет слепок данных 
Опции:
-a для добавления всех изменений
-m для передачи сообщения коммита без запуска полноценного редактора 
23. $ git push - файл добавляется на удаленный репозиторий Github

Написание скрипта
Скрипты - последовательность действий, описанных с помощью скриптового языка программирования для автоматического выполнения определенных задач.
1. $ nano scripts1.sh
Открывается редактор
2. #!/bin/bash
и прописываем все действия, которые хотим выполнить:
например
cd papka
mkdir zol
cd zol
mkdir test test2
cd test
touch mur.txt zur.txt
mkdir sub1 sub2 
ls
mv mur.txt ../test2
3. Далее для сохранения ctrl+x
4. Запускаем с помощью команды:
$ sh scripts1.sh
5. Чтобы изменить скрипт, можно воспользоваться командой:
$ nano scripts1.sh

