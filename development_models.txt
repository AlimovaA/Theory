Модели разработки ПО

1. Водопадная (каскадная) модель Waterfall model
В этой модели каждый этап разработки , соответствующей стадии жизненного цикла ПО продолжает предыдущий. То есть, для того, чтобы перейти на новый этап, мы полностью должны завершить текущий.
Утверждение требований
                      -->Проектирование
                                       -->Разработка
                                                    -->Тестирование
                                                                   -->Поддержка
1. Каскадная модель достаточно проста и понятна, но она немного устарела и не так практична как раньше.
Плюсы:
1) Полное документирование каждого этапа;
2) Четкое планирование сроков и затрат;
3) Прозрачность процессов для заказчика.
Минусы:
1) Необходимость утверждения полного объема требований к системе еще на первом этапе;
2) В случае необходимости внесения изменений требований позднее - возврат к первой стадии и переделка заново всей проделанной работы;
3) Увеличение затрат средств и времени в случае необходимости изменения требований.
Такая модель разработки используется с четко определеннымии требованиями, для которых не предусматривается их изменение в процессе разработки.

2. V-образная модель (V-model)
V-модель - это улучшенная версия каскадной  модели.
Здесь на каждом этапе происходит контроль текущего процесса для того, чтобы убедиться в возможности перехода на следующий уровень.
В этой модели тестирование начинается со стадии написания требований, причем для каждого последующего этапа предусмотрен свой уровень тестового покрытия.

Здесь процесс разработки представлен нисходящей последовательностью в левой части условной V, а стадии тестирования - на ее правом ребре. Соответствие этапов разработки и тестирования показано горизонтальными линиями.

Плюсы: 
1) Строгие этапы; 
2) Ранне тестирование; 
3) Промежуточное тестирование. 
Минусы: 
1) Нет гибкости; 
2) Написание кода только в середине процесса; 
3) Нет возмоности динамического внесения изменений. 
Когда используется.
Когда в проектах существуют временные и финансовые ограничения и для таких задач, которые предполагают более широкое тестовое покрытие.

3. Итеративная модель (Iterative model)
Итеративная модель не предполагает полного объема требований для начала работ над продуктом. Разработка программы может начинаться с ее требований к части функционала, которые могут впоследствии дополняться и изменяться. Процесс повторяется, обеспечивая создание новой версии продукта для каждого цикла.

В несколько упрощенном виде, итеративная модель состоит из 4-х основных стадий, которые повторяются в каждом из итераций (Plan-do-check-act):
- определение и анализ требований;
- дизайн и проектирование (согласно требованиям). Причем дизайн может разрабатываться как отдельно для данной функциональности, так и дополнять уже существующий.
- разработка и тестирование - кодирование, интеграция и тестирование нового компонента;
- фаза-ревью - оценка, пересмотр текущих требований и предложения дополнений к ним.

Плюсы:
1) Ранне создание ПО;
2) Гибкость - готовность к изменению требований на любом этапе разработки;
3) Каждая итерация - маленький этап, для которого тестирование и анализ обеспечить проще, чем для ЖЦ продукта.
Минусы:
1) Каждая фаза самостоятельна, отдельные итерации не накладываются;
2) Не все требования известны.
Когда используется.
- Для крупных проектов;
- Когда известны, по крайней мере, ключевые требования;
- Когда требования к проекту могут меняться в процессе разработки.
Именно итерационная модель является ключевым элементом так называемых "гибких" (Agile) подходов.
